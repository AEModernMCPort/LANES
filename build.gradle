plugins {
	id 'java-library'
	id 'maven-publish'
	id 'jacoco'
	id 'com.github.kt3k.coveralls' version '2.8.4'
	id "org.checkerframework" version "0.3.4"
}

apply plugin: 'org.checkerframework'

repositories {
	jcenter()
}

sourceCompatibility = java_version
targetCompatibility = java_version_target

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

sourceSets {
	samples {
		java {
			srcDir 'src/samples/java'
		}
		resources {
			srcDir 'src/samples/resources'
		}
	}
}

dependencies {
	samplesImplementation sourceSets.main.compileClasspath
	samplesImplementation sourceSets.main.output

	testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
	testImplementation sourceSets.samples.output
}

/*Awaiting checkerframework for Java 12...
checkerFramework {
	checkers = [
			'org.checkerframework.checker.nullness.NullnessChecker'
	]
}*/

// Project properties

if(!project.hasProperty('publish_name')) ext.publish_name = project.name
if(!project.hasProperty('github_repo')) ext.github_repo = publish_name
ext.github_repo_full = github_owner + '/' + github_repo

archivesBaseName = publish_name
version = "${version_major}.${version_minor}.${version_patch}"
if(version_channel != ''){
	version += "-$version_channel"
	if(version_pre != '') version += ".$version_pre"
}
group = publish_group

// Java Opts

java {
	withJavadocJar()
	withSourcesJar()
}

javadoc {
	failOnError = false
	options.encoding = 'UTF-8'
	options.addBooleanOption('html5', true)
}

// Tesing

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

jacocoTestReport {
	reports {
		xml.enabled = true // coveralls plugin depends on xml format report
		html.enabled = true
	}
}

coveralls {
	jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}

// Publishing

publishing {
	publications {
		mavenJava(MavenPublication){
			pom {
				name = publish_name
				description = publish_desc
				url ='https://github.com/${github_repo_full}'
				from components.java
				licenses {
					license {

					}
				}
				developers {
					developer {
						id = "Elix-x"
						name = 'Elix X'
						email = 'elix.x.ggl@gmail.com'
						url = 'https://github.com/Elix-x'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/${github_repo_full}.git'
					developerConnection = 'scm:git:ssh://github.com:${github_repo_full}.git'
					url = 'https://github.com/${github_repo_full}/tree/master'
				}
			}
		}
	}
	repositories {
		maven {
			name = 'GitHub ${github_owner} Maven Packages'
			url = 'https://maven.pkg.github.com/${github_repo_full}'
			credentials {
				username = System.getenv("GITHUBACCESSUSER")
				password = System.getenv("GITHUBACCESSTOKEN")
			}
		}
	}
}

/*tasks.withType(Jar){ task ->
	task.doLast {
		ant.checksum file: task.archivePath
		ant.checksum(file: task.archivePath, algorithm: 'SHA')
	}
}*/
